{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCzXOeNYBJRAawPJMv86QUdKPCJuc6tDBg\",\n  authDomain: \"choose-kindness.firebaseapp.com\",\n  projectId: \"choose-kindness\",\n  storageBucket: \"choose-kindness.appspot.com\",\n  messagingSenderId: \"575812604302\",\n  appId: \"1:575812604302:web:46a575d3ae437353f9d4df\",\n  measurementId: \"G-JHE3B076DQ\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/ACER/Desktop/choose-kindness/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n        apiKey: \"AIzaSyCzXOeNYBJRAawPJMv86QUdKPCJuc6tDBg\",\r\n        authDomain: \"choose-kindness.firebaseapp.com\",\r\n        projectId: \"choose-kindness\",\r\n        storageBucket: \"choose-kindness.appspot.com\",\r\n        messagingSenderId: \"575812604302\",\r\n        appId: \"1:575812604302:web:46a575d3ae437353f9d4df\",\r\n        measurementId: \"G-JHE3B076DQ\"\r\n};\r\n\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if(!userAuth)return;\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n    if(!snapShot.exists){\r\n        const { displayName, email }  = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        }catch(error){\r\n            console.log('error creating user', error.message);\r\n        }\r\n    }\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (\r\n    collectionKey,\r\n    objectsToAdd\r\n  ) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n  \r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach((obj) => {\r\n      const newDocRef = collectionRef.doc();\r\n      batch.set(newDocRef, obj);\r\n    });\r\n  \r\n    return await batch.commit();\r\n  };\r\n\r\n  export const convertCollectionsSnapshotToMap =(collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        const{title,items} = doc.data();\r\n\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        }\r\n    });\r\n    return transformedCollection.reduce((accumulator, collection)=>{\r\n        accumulator[collection.title.toLowerCase()]  = collection;\r\n        return accumulator;\r\n    },{});\r\n  };\r\n\r\n  export const getCurrentUser = () => {\r\n      return new Promise((resolve, reject) => {\r\n          const unsubscribe = auth.onAuthStateChanged(userAuth=> {\r\n              unsubscribe();\r\n              resolve(userAuth);\r\n          },reject)\r\n      });\r\n  }\r\n\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}